// Generated by IcedCoffeeScript 108.0.9
var Fancy, errify, fs, iced, path, pug, template, util, __iced_k, __iced_k_noop;

iced = require('iced-runtime');
__iced_k = __iced_k_noop = function() {};

require("source-map-support/register");

fs = require("fs");

pug = require("pug");

path = require("path");

util = require("util");

errify = require("errify");

template = fs.readFileSync(path.join(__dirname, "..", "templates", "error.pug"), "utf-8");

template = pug.compile(template);

Fancy = (function() {
  function Fancy() {}

  Fancy.stringify = function(obj) {
    var stack, str;
    stack = obj.stack;
    if (stack) {
      return String(stack);
    }
    str = String(obj);
    if (str === Object.prototype.toString.call(obj)) {
      return util.inspect(obj);
    } else {
      return str;
    }
  };

  Fancy.log = function(logger) {
    return function(err) {
      return setImmediate(logger, err, Fancy.stringify(err));
    };
  };

  Fancy.html = function(err, cb) {
    var col, end, esc, excerpt, file, line, result, row, stack, start, _, ___iced_passed_deferral, __iced_deferrals, __iced_k;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    esc = errify(cb);
    stack = this.stringify(err);
    (function(_this) {
      return (function(__iced_k) {
        var _ref;
        if (err instanceof Error) {
          _ref = err.stack.split("\n"), _ = _ref[0], line = _ref[1];
          result = /at\s(.+\s)?\(?(.+)\:([0-9]+)\:([0-9]+)/.exec(line);
          path = result[2];
          row = +result[3];
          col = +result[4];
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "/home/charles/source/express-rendertype/src/fancy.coffee",
              funcname: "Fancy.html"
            });
            fs.readFile(path, "utf-8", esc(__iced_deferrals.defer({
              assign_fn: (function() {
                return function() {
                  return file = arguments[0];
                };
              })(),
              lineno: 34
            })));
            __iced_deferrals._fulfill();
          })(function() {
            file = file.split("\n");
            start = row - 6 < 0 ? 0 : row - 6;
            end = row + 6;
            return __iced_k(excerpt = file.slice(start, +end + 1 || 9e9));
          });
        } else {
          err = new Error(err);
          row = col = start = 0;
          excerpt = stack.split("\n");
          return __iced_k(stack = err.stack);
        }
      });
    })(this)((function(_this) {
      return function() {
        return cb(null, template({
          name: err.name,
          message: err.message,
          line: row,
          column: col,
          excerpt: excerpt,
          excerpt_start: start + 1,
          stack: stack
        }));
      };
    })(this));
  };

  Fancy.json = function(err) {
    var error, prop;
    error = {
      message: err.message,
      stack: err.stack
    };
    for (prop in err) {
      error[prop] = err[prop];
    }
    return {
      error: error
    };
  };

  return Fancy;

})();

module.exports = Fancy;

//# sourceMappingURL=fancy.js.map
